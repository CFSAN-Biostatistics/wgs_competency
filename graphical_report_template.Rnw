% 
\documentclass[12pt]{article}
\usepackage{Sweave}
\usepackage{pdflscape}
\usepackage{geometry}
\geometry{letterpaper, portrait, margin=1in}
\SweaveOpts{height=6,width=10,echo=FALSE}
\setkeys{Gin}{width=6in}
\usepackage[format=hang,font=small,labelfont=bf]{caption}
\usepackage[dvipsnames]{xcolor}

\title{WGS Competency Assessment Graphical Report\protect\\[0.2in]"Title goes here"}
\author{Analysis by "Analyst name"}

\begin{document}
\maketitle
\tableofcontents

<<echo=FALSE>>=

#----------------------
# Defaults
#----------------------

organisms <- c("Salmonella enterica subsp. enterica serovar Enteritidis",
               "Salmonella enterica subsp. enterica serovar Enteritidis",
               "Salmonella enterica subsp. enterica serovar Typhimurium",
               "Salmonella enterica subsp. enterica serovar Newport",
               "Listeria monocytogenes",
               "Listeria monocytogenes")          
isolate.ids <- c("SAP18-0432","SAP18-H9654","SAP18-6199","SAP18-8729",
   "LMP18-H2446","LMP18-H8393")
isolate.ids.abbr <- c("0432","H9654","6199","8729","H2446","H8393")
read.depth.thresh <- 20
read.qual.thresh <- 30

#----------------------
# Input Files
#----------------------

library("optparse")

option_list = list(
  make_option(c("-a", "--analysis"), type="character", default="./analysis_results.tsv", 
              help="analysis results file [default= %default]", metavar="character"),
  make_option(c("-k", "--kit"), type="character", default="miseqv2-250", 
              help="reagent kit description [default= %default]", metavar="character"),
  make_option(c("-m", "--message"), type="character", default="", 
              help="optional conclusions text [default= %default]", metavar="character"),
  make_option(c("-r", "--run"), type="character", default="./run_results.tsv", 
              help="run results file [default= %default]", metavar="character"),
  make_option(c("-R", "--runstats"), type="character", default="./run_stats.tsv", 
              help="run statistics file [default= %default]", metavar="character"),
  make_option(c("-s", "--seq"), type="character", default="./seq_results.tsv", 
              help="sequence results file [default= %default]", metavar="character"),
  make_option(c("-S", "--seqstats"), type="character", default="./seq_stats.tsv", 
              help="sequence statistics file [default= %default]", metavar="character")
); 

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
kit <- opt$kit
message <- opt$message
run.stats.file <- opt$runstats
run.results.file <- opt$run
seq.stats.file <- opt$seqstats
seq.results.file <- opt$seq

run.stats <- read.delim(run.stats.file,header=T,sep = "\t",stringsAsFactors=F,
  colClasses = c("character",rep("numeric", 5)))
  # Cols - Metric,LowerBound,Q1,Median,Q3,UpperBound
run.results <- read.delim(run.results.file,header=T,sep = "\t",stringsAsFactors=F,
  colClasses = c("character","integer",rep("numeric", 6)))
  # Cols - FlowCell,ClusterDensity,PerClustersPF,ReadsPF_M,TotalYield_GB,
  # PerGtQ30,PerReadsIdentified,IndexingCV
seq.stats <- read.delim(seq.stats.file,header=T,sep = "\t",stringsAsFactors=F,
  colClasses = c(rep("character", 3),rep("numeric", 6)))
  # Cols - IsolateID,Genus,Metric,LowerBound,Q1,Median,Q3,UpperBound,Threshold
seq.results <- read.delim(seq.results.file,header=T,sep = "\t",stringsAsFactors=F,
  colClasses = c(rep("character", 11), rep("integer", 2), "character", rep("numeric", 4), 
  rep("integer", 2), "numeric", "integer", "numeric", rep("integer", 3), rep("character", 3)))
  # Cols - SampleID,IsolateID,Organism,Genus,Sequencer,Machine,FlowCell,LibKit,Chemistry,
  # RunDate,SequencedBy,SamplesPerRun,Reads,SeqLength,MeanForReadQual,MeanRevReadQual,
  # PercMapped,MeanDepth,CovLT10,SNPs,MeanInsert,NG50,GenomeFraction,Contigs,
  # LengthDelta,UnalignedLength,MostAbundantOrganism,Misannotated,Coverage

#----------------------
# Prep Datasets
#----------------------

##### Prep seq.results ####
# Prepare ordered X labels (2nd field of IsolateID)
ordered.isolates <- NULL
for (i in isolate.ids) {
  if (i %in% unique(seq.results$IsolateID)) {
    ordered.isolates <- c(ordered.isolates, i)
  }
}
seq.results$IsolateID <- factor(seq.results$IsolateID,levels=ordered.isolates,ordered=T)

seq.results$ID <- gsub(".+-+(.+)", "\\1" ,seq.results$IsolateID)
plot.order <- NULL
for (i in isolate.ids.abbr) {
  if (i %in% unique(seq.results$ID)) {
    plot.order <- c(plot.order, i)
  }
}
seq.results$ID <- factor(seq.results$ID,levels=plot.order,ordered=T)

# Prepare Run labels (2nd field of FlowCell)
seq.results$Run<-as.character(gsub("000000000-", "\\1" ,seq.results$FlowCell))

#### Prep seq.stats ####
seq.stats <- seq.stats[which(seq.stats$IsolateID %in% unique(seq.results$IsolateID)),]
seq.stats$ID <- gsub(".+-+(.+)", "\\1" ,seq.stats$IsolateID)
seq.stats$ID <- factor(seq.stats$ID,levels=plot.order,ordered=T)

#### Prep run.results ####
# Prepare Run labels (2nd field of FlowCell)
run.results$Run<-as.character(gsub("000000000-", "\\1" ,run.results$FlowCell))
run.results$Constant <- 1

#### Prep run.stats ####
run.stats$Constant <- 1

df.check <- function(x) {
  output <- "There are no valid focal isolates.\n"
  if(!length(x$SampleID)) {
    cat(output)
    cat("\\end{document}\n")
    stop(output)
  } 
}

df.check(seq.results)


#------------------------------
# Plotting libraries
#------------------------------
library(ggplot2)
library(ggsci)
library(cowplot)
library(grid)
library(gridExtra)

#------------------------
# Plotting functions
#------------------------

# Prepare color palettes
gg_color_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}
pal <- pal_npg("nrc", alpha = 1)(10)
pal1 <- pal[c(1,2,4,6:10)]

gg.basic <- function(col,ylab,abline=NA) {
  # Plots boxplots for a single sequence metric across multiple isolates
  # Inputs: col = column name in seq.results df
  #         ylab = the desired y-axis label
  #         abline = value for horizontal threshold if desired
  
  curr.seq.stats <- seq.stats[which(seq.stats$Metric==col),]     
          
  p <- ggplot() +   
       geom_boxplot(data=curr.seq.stats,mapping=aes(
                    x = ID,
                    color = Genus,
                    ymax = UpperBound,
                    upper = Q3,
                    middle = Median, 
                    lower = Q1,
                    ymin = LowerBound),
                    alpha = 0.7,outlier.shape = NA,stat = "identity"
       ) +            
       scale_color_manual("Genus", breaks = c("Salmonella","Listeria"),
         values = pal1) 
              
  if (!is.na(abline)) { 
    p <- p + geom_abline(aes(size="Q30 Cutoff"), color="lightgreen", 
                         intercept=abline, slope=0, lty=5)
  } 
       
  p <- p + geom_jitter(data=seq.results, mapping=aes(x=ID,y=get(col),
                       fill=Run, color=Run),height=0,width=0.25,size=2.5) +
           scale_fill_manual("Run", values=pal1[c(1:length(unique(seq.results$Run)))],
                             guide=guide_legend(override.aes = list(colour=pal1[c(1:length(unique(seq.results$Run)))]))) + 
           background_grid(major = "xy", minor = "none") +
           labs(x="Isolate", y=ylab)
    
  return(p)
}

gg.runs <- function(metric,ylab) {
  # Plots a single boxplot for a single run metric
  # Inputs: metric = column name in run.results df
  #         ylab = the desired y-axis label
  
  curr.run.stats <- run.stats[which(run.stats$Metric==metric),]     
      
  p <- ggplot() +   
       geom_boxplot(data=curr.run.stats,mapping=aes(
                    x = Constant,
                    ymax = UpperBound,
                    upper = Q3,
                    middle = Median, 
                    lower = Q1,
                    ymin = LowerBound),
                    alpha = 0.7,outlier.shape = NA,stat = "identity"
       ) +            

       geom_jitter(data=run.results, aes(x=Constant,y=get(metric),fill=Run,color=Run),
                   height=0,width=0.25,size=2.5) +
                   background_grid(major = "xy", minor = "none") +
                   labs(x="",y=ylab) + 
                   theme(axis.title.x=element_blank(),
                         axis.text.x=element_blank(),
                         axis.ticks.x=element_blank())
             
  return(p)               
}

gg.cov <- function(id,smooth=10000) {
  # Plots coverage plot and histogram for a single sample ID (replicates allowed)
  # Inputs: id = sample ID
  #         smooth = smoothing level

  isolates.df <- seq.results[which(seq.results$ID == id),]
  cov.chr.df <- data.frame(seq=character(),x=integer(),depth=integer(),
    SampleID=character(),ID=character(),Genus=character(),stringsAsFactors=FALSE)
  cov.chr.smoothed.df <- data.frame(seq=character(),x=integer(),depth=integer(),
    SampleID=character(),ID=character(),Genus=character(),stringsAsFactors=FALSE)
  for (i in 1:length(isolates.df$ID)) {
    isolate.df <- isolates.df[i,]
    df <- read.delim(isolate.df$Coverage,header=F,stringsAsFactors=F)
    names(df) <- c("seq","x","depth")
    df$SampleID <- isolate.df$SampleID
    df$ID <- id
    df$Genus <- isolate.df$Genus
    df <- df[which(df$seq == "chromosome"),]
    cov.chr.df <- rbind(cov.chr.df, df)
    smoothed <- spline(x=df$x,y=df$depth,n=smooth)
    smoothed.df <- df[1:smooth,]
    smoothed.df$x <- smoothed$x
    smoothed.df$depth <- smoothed$y
    cov.chr.smoothed.df <- rbind(cov.chr.smoothed.df, smoothed.df)
  }
  
  plots <- list()  
  for (i in 1:length(unique(cov.chr.smoothed.df$SampleID))) {
    SampleID <- unique(cov.chr.smoothed.df$SampleID)[i]
    bc <- cov.chr.smoothed.df[which(cov.chr.smoothed.df$SampleID == SampleID),]
    col <- gg_color_hue(i)[i]
    plots[[i]] <- ggplot(bc, aes(x=x, y=depth)) + 
                geom_line(color=col,size = 0.1,alpha=1) +
                theme(plot.margin = unit(c(0, 0, 0, 0), "cm"),
                      axis.text.y=element_text(size=6),
                      axis.text.x=element_text(size=8)) +
                labs(x=NULL,y=NULL)
  }
  
  if (length(plots) > 1) {
    for ( i in 1:(length(plots)-1) ) {
      plots[[i]] <- plots[[i]] + theme(axis.text.x=element_blank(),
                                       axis.ticks.x = element_blank())
    } 
  }                             
  
  rh.value = as.numeric(paste(1,length(plots),sep='.'))                  
  p1 <- plot_grid(plotlist=plots,
            align = 'v',
            ncol=1,
            rel_heights = c(rep(1,length(plots)-1),rh.value)
  )                          
 
 
  p2 <- ggplot() + labs(x=NULL,y=NULL)
  for (i in 1:length(unique(cov.chr.df$SampleID))) {
    d <- cov.chr.df[which(cov.chr.df$SampleID == unique(cov.chr.df$SampleID)[i]),]
    p2 <- p2 + geom_histogram(data=d,mapping=aes(x=depth),color=gg_color_hue(i)[i],
      fill=gg_color_hue(i)[i],alpha=0.5,binwidth = 10,size=0.1) +
    theme(axis.text=element_text(size=8))
  }
  
  tmp <- ggplot() + 
      geom_histogram(data=cov.chr.df,mapping=aes(x=depth,color=SampleID,
        fill=SampleID),binwidth = 10) +
      theme(legend.position = c(0.7, 0.8)) + theme(legend.key.size = unit(0.2,"line"), 
        legend.title=element_text(size=8), legend.text=element_text(size=8))
  legend <- get_legend(tmp)
   
  xmax <- ggplot_build(p2)$layout$panel_ranges[[1]]$x.range[2]
  xminoffset <- (xmax - (0.3 * xmax))
  ymax <- ggplot_build(p2)$layout$panel_ranges[[1]]$y.range[2]
  yminoffset <- (ymax - (0.3 * ymax))
  p2 <- p2 + annotation_custom(grob = legend,xmin=xminoffset,xmax=xmax,ymin=yminoffset) 

  return(list(p1,p2))
}


@

\newpage

\section{Overview}
\setlength\floatsep{0pt}
\setlength\intextsep{0pt}

This report provides an analytical evaluation of sequencing metrics for bacterial whole genome sequencing data comprising a sequencing competency assessment exercise. Sequence metrics have been compared to expected values based on recommended data submission thresholds or derived from the distribution of isolates sequenced during the 2018 PulseNet-GenomeTrakr harmonized Proficiency Testing (PT) exercise as part of a 16-sample 2X250 run on an Illumina MiSeq machine (V2 chemistry) using the Nextera XT DNA Library Prep Kit. 
\vspace{20pt}
<<label=xtable1,echo=FALSE,results=tex>>=

#---------------------------
# Table 1 - PT isolates
#---------------------------

library(xtable)
isolates <- matrix(c(isolate.ids,organisms),ncol=2,byrow=F)
colnames(isolates) <- c("Isolate ID","Organism")
rownames(isolates) <- c(1:length(isolate.ids))
isolates <- as.table(isolates)
next.table <- 1
print(xtable(isolates, caption = "The 2018 PT isolates.", 
  label = "tab:one"), scalebox=0.8, caption.placement = "bottom")
next.table <- next.table + 1
@
\vspace{20pt}
<<label=xtable2,echo=FALSE,results=tex>>=

#------------------------------
# Table 2 - Focal Isolates
#------------------------------

sorted.isolates <- seq.results[order(seq.results$Run,seq.results$SampleID),]
attach(sorted.isolates)
annotations <- matrix(c(SampleID,as.character(IsolateID),Machine,Run),ncol=4,byrow=F)
colnames(annotations) <- c("Sample ID","Isolate ID","Machine","Flowcell")
rownames(annotations) <- c(1:length(sorted.isolates$SampleID))
annotations <- as.table(annotations)
print(xtable(annotations, caption = "Isolates submitted for analysis.", 
  label = paste("tab:", next.table, sep="")), 
  scalebox=0.8, caption.placement = "bottom")
next.table <- next.table + 1
detach(sorted.isolates)

@

\section{Results}

<<echo=FALSE,results=tex>>=

#------------------------------
# Create Tables - Competency Assessment Isolates
#------------------------------

# Multiple tables are created if multiple runs are present
# Table output is stored in the following loop and printed later
# Metric failures are tracked in the following loop

unique.runs <- unique(seq.results$Run)
caption <- "Competency Assessment Metrics - Quantitative Results."
n.table <- next.table       # store current table number
fails <- NULL               # track failures
metric.order <- seq(1:7)
names(metric.order) <- c("Taxonomy","MeanDepth","MeanInsert","MeanR1Qual","MeanR2Qual","NG50","Contigs")
comp.tables <- list()

for (run in unique.runs) {
 
  comp.df <- seq.stats[which(seq.stats$Metric %in% c("MeanDepth","MeanInsert",
    "MeanR1Qual","MeanR2Qual","NG50","Contigs")),c("IsolateID","Metric","Threshold")]
  comp.df <- comp.df[which(comp.df$IsolateID %in% unique(seq.results$IsolateID[which(seq.results$Run==run)])),]
  
  for (i in 1:length(comp.df$IsolateID)) {

    isolate.df <- seq.results[which(seq.results$IsolateID == comp.df$IsolateID[i] & seq.results$Run==run),]
    comp.df$SampleID[i] <- isolate.df$SampleID
    comp.df$OrigValue[i] <- as.numeric(isolate.df[comp.df$Metric[i]])
    comp.df$Order <- as.numeric(metric.order[comp.df$Metric[i]])
    if (comp.df$Metric[i] == "Contigs") {
      if (comp.df$OrigValue[i] > comp.df$Threshold[i]) {
        comp.df$Value[i] <- paste("red", comp.df$OrigValue[i], "red", sep='')
        fails <- c(fails, isolate.df$SampleID)
      } else {
        comp.df$Value[i] <- paste("green", comp.df$OrigValue[i], "green", sep='')
      }
    } else if (comp.df$OrigValue[i] < comp.df$Threshold[i]) { 
      comp.df$Value[i] <- paste("red", comp.df$OrigValue[i], "red", sep='')
      fails <- c(fails, isolate.df$SampleID)
    } else {
      comp.df$Value[i] <- paste("green", comp.df$OrigValue[i], "green", sep='')
    }  
  }
  
  for (i in 1:nrow(comp.df)) {  
    if (comp.df$Metric[i] == "Contigs") {
      comp.df$Threshold[i] <- paste("<=", comp.df$Threshold[i], sep=' ')
    } else {
      comp.df$Threshold[i] <- paste(">=", comp.df$Threshold[i], sep=' ')
    }
  }

  for (id in unique(comp.df$IsolateID)) {
    isolate.df <- seq.results[which(seq.results$IsolateID == id & seq.results$Run==run),]
    if (isolate.df$Reads < 100000) {
      taxonomy.row <- c(id, "Taxonomy", "PASS", isolate.df$SampleID, "Undetermined", 1, "Undetermined") 
    } else if (isolate.df$Misannotated == "FALSE") {
      taxonomy.row <- c(id, "Taxonomy", "PASS", isolate.df$SampleID, "PASS", 1, "greenPASSgreen") 
    } else {
      taxonomy.row <- c(id, "Taxonomy", "PASS", isolate.df$SampleID, "FAIL", 1, "redFAILred") 
    }
    comp.df <- rbind(comp.df, taxonomy.row)
  }  

  comp.df$Threshold <- as.character(comp.df$Threshold)
  comp.df <- comp.df[order(comp.df$SampleID,comp.df$Order),]

  comp.matrix <- as.matrix(comp.df[,c("SampleID","IsolateID","Metric","Threshold","Value")],ncol=6,byrow=F)
  colnames(comp.matrix) <- c("SampleID", "Isolate ID", "Metric", "Threshold", "Value")
  comp.table <- as.table(comp.matrix)
  comp.table.out <- capture.output(print(xtable(comp.table, caption = caption, 
    label = paste("tab:", next.table, sep="")), 
    scalebox=0.8, caption.placement = "bottom",include.rownames=FALSE))
  comp.table.out <- gsub("(\\s|^)green(.+)green", "\\1\\\\textcolor{green}{\\\\textbf{\\2}}", comp.table.out)
  comp.table.out <- gsub("(\\s|^)red(.+)red", "\\1\\\\textcolor{red}{\\\\textbf{\\2}}", comp.table.out)  
  comp.table.out <- gsub("\\$>\\$=", "\\$\\\\geq\\$", comp.table.out)
  comp.table.out <- gsub("\\$<\\$=", "\\$\\\\leq\\$", comp.table.out)

  comp.tables <- append(comp.tables, comp.table.out) 
   
  # Prepare for next table if multiple runs are present
  caption <- "Competency Assessment Metrics - Quantitative Results (Continued)."
  next.table <- paste(next.table, " - cont.", sep='')
  n.table <- n.table + 1
}
next.table <- n.table

#---------------------------------------------------------
# Calculate percent of focal isolates which passed checks
#---------------------------------------------------------

uniq.fails <- length(unique(fails))
total.isolates <- length(seq.results$IsolateID)
passed.isolates <- total.isolates - uniq.fails
perc.passed <- round((passed.isolates / total.isolates * 100))

#-----------------------------------------
# Remove undesired isolates from analysis
#-----------------------------------------

seq.results <- seq.results[which(seq.results$Misannotated == "FALSE"),]
df.check(seq.results)
seq.results <- seq.results[which(seq.results$Reads >= 100000),]
df.check(seq.results)

#-----------------------------------------
# Print results summary
#-----------------------------------------

cat(paste("Of the ", total.isolates, " isolates submitted as part of this exercise, ", passed.isolates, " (", perc.passed, "\\%) were determined to be correctly annotated and to have fully met the analytical expectations of this exercise.\n", sep=""))
@

\\\\The following section contains quantitative and graphical representations of your PT sequencing isolates (colored data points) and the distribution of runs from all participating GenomeTrakr labs (boxplots). The isolates are labeled (x -axis) using the abbreviated Isolate ID. For each boxplot, the box defines the median value as well as the lower and upper quartiles (25\% and 75\%). The whiskers extend to 1.5 times the interquartile range from the median. Pay particular attention to any figures in which values for your run fall outside of the 25\% - 75\% interquartile range (the boundaries of the box in the plot).


\newpage
\newgeometry{top=0.8in,bottom=0.9in}
\subsection{Competency Assessment Metrics}
\begin{small}
<<echo=FALSE,results=tex>>=

#-------------------------------
# Competency Assessment Metrics
#-------------------------------

desc <- "The following metrics are under evaluation in this competency assessment (\\textbf{Figs. 1-6}) -\n
$\\bullet$\\textbf{ Taxonomy} - the accuracy of the taxonomic annotation.\n
\\textbf{1. Mean depth} - the mean depth of coverage. QC threshold = 20X.\n
\\textbf{2. Mean insert size} - the mean length of the sequence between the adapters.\n
\\textbf{3. Mean read quality scores - forward reads (R1)} - QC threshold = Q30.\n
\\textbf{4. Mean read quality scores - reverse reads (R2)} - QC threshold = Q30.\n
\\textbf{5. NG50} - A metric describing the distribution of contig lengths.\n
\\textbf{6. Contigs} - The total number of contigs in the assembly.\n"

cat(desc)
@
\vspace*{15pt}
<<echo=FALSE,results=tex>>=

#---------------------------------------------------------
# Print Table 3 (or more) - Competency Assessment Metrics
#---------------------------------------------------------

for (t in comp.tables) {
  cat(t, sep="\n")
}  

@

\end{small}
\restoregeometry

\clearpage
\vspace*{15pt}
\setkeys{Gin}{width=5.5in}
\begin{figure}[!htb]
\begin{center}

<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("MeanDepth", "Mean Read Depth", abline=20)
print(p)
@
\captionsetup{skip=5pt,belowskip=25pt}
\caption{Mean depth}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("MeanR1Qual", "Mean Read Quality - R1", abline=30)
print(p)
@
\captionsetup{skip=5pt,belowskip=25pt}
\caption{Mean read quality score - forward reads (R1)}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("MeanR2Qual", "Mean Read Quality - R2", abline=30)
print(p)
@
\captionsetup{skip=5pt}
\caption{Mean read quality score - reverse reads (R2)} 
\end{center}
\end{figure}


\newpage
\vspace*{15pt}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("MeanInsert", "Mean Insert Size")
print(p)
@
\captionsetup{skip=5pt,belowskip=25pt}
\caption{Mean insert size}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("NG50", "NG50")
print(p)
@
\captionsetup{skip=5pt,belowskip=25pt}
\caption{NG50}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("Contigs", "Number of Contigs")
print(p)
@
\captionsetup{skip=5pt}
\caption{Contigs}
\end{center}
\end{figure}

\newpage

\subsection{Additional Metrics}
\begin{small}
<<echo=FALSE,results=tex>>=
desc <- "The following metrics are provided for informational purposes. (\\textbf{Figs. 7-15}) -\n"
cat(desc)
@

\subsubsection{Run Metrics}
<<echo=FALSE,results=tex>>=

desc <- "The following run metrics were evaluated (\\textbf{Fig. 7}) -\n
\\textbf{a. Cluster Density (K/mm\\textsuperscript{2})} - density of clusters for each tile.\n
\\textbf{b. Clusters PF (\\%)} - the percentage of clusters passing filter for each tile.\n
\\textbf{c. Reads PF (M)} - the number of reads/clusters passing filter (millions).\n
\\textbf{d. Yield (Gb)} - the total yield in Gigabases.\n
\\textbf{e. Bases >= Q30 (\\%)} - the percentage of bases with a quality score >= 30.\n
\\textbf{f. Reads Identified (\\%)} - the percentage of Reads PF which were assigned to an index.\n
\\textbf{g. Indexing CV} - the coefficient of variation for the number of counts across all indices.\n"
cat(desc)

#------------------------------
# Run Metrics
#------------------------------

@ 
\vspace{30pt}
\end{small}
\setkeys{Gin}{width=7in}

\begin{figure}[!ht]
\begin{center}
<<echo=FALSE,fig=TRUE,height=3>>=
p1 <- gg.runs("ClusterDensity", "Cluster Density")
p2 <- gg.runs("PerClustersPF", "Clusters PF (%)")
p3 <- gg.runs("ReadsPF_M", "Reads PF (M)")
p4 <- gg.runs("TotalYield_GB", "Yield (Gb)")
p5 <- gg.runs("PerGtQ30", "Bases >= Q30 (%)")
p6 <- gg.runs("PerReadsIdentified", "Reads Identified (%)")
p7 <- gg.runs("IndexingCV", "Indexing CV")

prow<-plot_grid(p1 + theme(legend.position="none"),
                p2 + theme(legend.position="none"),
                p3 + theme(legend.position="none"),
                p4 + theme(legend.position="none"),
                p5 + theme(legend.position="none"),
                p6 + theme(legend.position="none"),
                p7 + theme(legend.position="none"),
          align = 'vh',
          labels = c("a)", "b)","c)","d)","e)","f)","g)"),
          nrow = 1
)
legend <- get_legend(p1)
plot_grid(prow,legend,rel_widths = c(1, .1))

@

\caption{Run Metrics}
\end{center}
\end{figure}
\vspace{20pt}
<<label=xtable3,echo=FALSE,results=tex>>=

#------------------------------
# Table 3 - Run Metrics
#------------------------------

library(xtable)

#### Expected values
caption <- "Run metrics compared to expected values."
if (kit == "miseqv2-250") {
  expected <- c("800-1100"," ","12-15","7.5-8.5",">75%"," "," ")
  caption <- "Run metrics and manufacturer expected values for MiSeq V2 2x250 runs."
} else if (kit == "miseqv3-300") {
  expected <- c("1200-1400"," ","22-25","13.2-15",">70%"," "," ")
  caption <- "Run metrics and manufacturer expected values for MiSeq V3 2x300 runs."
} else if (kit == "miseqv2micro-150") {
  expected <- c("800-1100"," ","4","1.2",">80%"," "," ")
  caption <- "Run metrics and manufacturer expected values for MiSeq V2 micro 2x150 runs."
} else if (kit == "miseqv2nano-250") {
  expected <- c("800-1100"," ","1","0.5",">75%"," "," ")
  caption <- "Run metrics and manufacturer expected values for MiSeq V3 nano 2x250 runs."
} else if (kit == "miniseqMid-150") {
  expected <- c("129-165"," ","7-8","2.1-2.4",">80%"," "," ")
  caption <- "Run metrics and manufacturer expected values for MiniSeq Mid-Output 2x150 runs."
} else if (kit == "miniseqHigh-150") {
  expected <- c("129-165"," ","22-25","6.6-7.5",">80%"," "," ")
  caption <- "Run metrics and manufacturer expected values for MiniSeq High-Output 2x150 runs."
}

runs<-unique(seq.results$Run)
run.matrix=matrix(nrow=length(expected),ncol=length(runs)+1,byrow=F)
colnames(run.matrix)=c(runs,"Expected")
for (run in runs) {
  df <- run.results[which(run.results$Run == run),]
  run.matrix[,run] <- c(df$ClusterDensity,df$PerClustersPF,df$ReadsPF_M,
    df$TotalYield_GB,df$PerGtQ30,df$PerReadsIdentified,df$IndexingCV)
}
run.matrix[,"Expected"]<-expected

rownames(run.matrix) <- c("Cluster Density (K/mm2)", "Clusters PF (%)", "Reads PF (M)", "Yield (Gb)", "Bases >= Q30 (%)", "Reads Identified (%)","Indexing CV")
run.table <- as.table(run.matrix)
print(xtable(run.table, caption = caption,label = "tab:two"), scalebox=0.8, 
  caption.placement = "bottom")
next.table <- next.table + 1
@



\clearpage
\subsubsection{Read Metrics}
\begin{small}
<<echo=FALSE,results=tex>>=
desc <- "The following read metrics were evaluated (\\textbf{Fig. 8})-\n
\\textbf{8. Reads} - the number of read pairs.\n"
cat(desc)

#------------------------
# Read Metrics
#------------------------
@
\end{small}
\vspace{25pt}
\setkeys{Gin}{width=5.5in}
\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("Reads","Reads")
print(p)
@
\captionsetup{skip=5pt,belowskip=5pt}
\caption{Reads}
\end{center}
\end{figure}


\subsubsection{Alignment Metrics}
\begin{small}
<<echo=FALSE,results=tex>>=
desc <- "The following alignment metrics were evaluated (\\textbf{Figs. 9-13}) -\n
\\textbf{9. Reads mapped} (\\%) - the percentage of reads which could be mapped to the reference.\n
\\textbf{10. Genome fraction} - the percentage of the reference with >= 1X coverage.\n
\\textbf{11. SNPs} - the number of SNPs reported.\n
\\textbf{12. Low coverage positions} - the number of positions with depth of coverage < 10X. This metric is highly inversely correlated with assembly quality.\n
\\textbf{13. Coverage Plots} - visualizations of coverage depth and variance across each position. Coverage plots were smoothed to 10000 points. Histograms of the coverage depth should resemble a Poisson-like distribution with a small standard deviation.\n"
cat(desc)

#------------------------
# Alignment Metrics
#------------------------
@
\end{small}
\vspace{25pt}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("PercMapped","Percentage of Reads Mapped")
print(p)
@
\captionsetup{skip=5pt}
\caption{Reads mapped (\%)}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("GenomeFraction", "Genome Fraction")
print(p)
@
\captionsetup{skip=5pt,belowskip=25pt}
\caption{Genome fraction (\%)}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("SNPs", "SNPs")
print(p)
@
\captionsetup{skip=5pt,belowskip=25pt}
\caption{SNPs}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("CovLT10", "Low Coverage Positions (<10X)")
print(p)
@
\captionsetup{skip=5pt}
\caption{Low coverage positions (< 10X)}
\end{center}
\end{figure}

\clearpage

<<echo=FALSE,results=tex>>=

caption="Coverage Plots. "
labels <- c("A","B","C","D","E","F")
cov.plots.list <- list()
# gg.cov returns a list containing two plots
for (i in 1:length(plot.order)) {
  cov.plots <- gg.cov(plot.order[i])
  cov.plots[[1]] <- ggdraw(cov.plots[[1]] + theme(plot.margin = unit(c(7, 0, 7, 20), "pt"))) + draw_plot_label(labels[i],size=10)
  cov.plots.list <- c(cov.plots.list, cov.plots)
  caption <- paste(caption, " ", labels[i], ".", plot.order[i], sep='') 
}  

caption <- paste(caption, ".")
@
\setkeys{Gin}{width=6.5in}

\begin{figure}
\begin{center}
<<echo=FALSE,fig=TRUE,height=10>>=
grid.arrange(grobs = cov.plots.list,
             ncol=2,widths=c(2,1),
             bottom = textGrob(
               "Position                                                                                                                                    Depth",
               gp = gpar(fontface = 2, fontsize = 9),
               hjust = 0,
               x = 0.325
             )
)

@
\caption{\Sexpr{caption}}
\end{center}
\end{figure}  
             
\clearpage
\subsubsection{Assembly Metrics}
\begin{small}
<<echo=FALSE,results=tex>>=
desc <- "The following assembly metrics were evaluated (\\textbf{Figs. 14-15}) -\n
\\textbf{14. Total Length Delta} - the difference between the lengths of the assembly and the reference. A perfect assembly would produce a delta of zero. Positive values indicate possible contamination.\n
\\textbf{15. Unaligned Length} - the total length of any assembled contigs which could not be aligned to the reference genome. The presence of unalignable contigs could indicate an unexpected genomic element (plasmid, phage) or contamination.\n"
cat(desc)

#------------------------
# Assembly Metrics
#------------------------
@
\end{small}
\vspace{50pt}
\setkeys{Gin}{width=5in}


\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("LengthDelta", "Total Length Delta")
print(p)
@
\captionsetup{skip=5pt,belowskip=50pt}
\caption{Total Length Delta}
\end{center}
\end{figure}

\begin{figure}[!htb]
\begin{center}
<<echo=FALSE,fig=TRUE,height=4>>=
p <- gg.basic("UnalignedLength", "Length of Unalignable Contigs")
print(p)
@
\captionsetup{skip=5pt}
\caption{Unaligned Length}
\end{center}
\end{figure}

\clearpage
\begin{landscape}
\newgeometry{top=10cm}
\appendix\section{Appendix}
\vspace{10 mm}

<<label=xtable4,echo=FALSE,results=tex>>=
#### Tables 4 and 5 - Metadata tables

t4<-sorted.isolates[c("SampleID","IsolateID","Sequencer",
  "Machine","FlowCell","LibKit","Chemistry","RunDate","SequencedBy","SeqLength")] 
rownames(t4) <- c(1:length(sorted.isolates$SampleID))

print(xtable(t4, caption = "Run Metadata.", 
  label = paste("tab:", next.table, sep="")), 
  scalebox=0.6, caption.placement = "bottom")
next.table <- next.table + 1
@

\vspace{20 mm}
<<label=xtable5,echo=FALSE,results=tex>>=

t5<-sorted.isolates[c("SampleID","Reads","MeanR1Qual","MeanR2Qual","PercMapped",
  "MeanDepth","SNPs","MeanInsert","GenomeFraction","CovLT10","NG50","Contigs",
  "LengthDelta","UnalignedLength")] 
rownames(t5) <- c(1:length(sorted.isolates$SampleID))

print(xtable(t5, caption = "Run Metadata Continued.", 
  label = paste("tab:", next.table, sep="")), 
  scalebox=0.6, caption.placement = "bottom")
next.table <- next.table + 1

@
\end{landscape}

\end{document}

          
